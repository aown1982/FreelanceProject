

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "C:\Users\josht_000\Dropbox\Work\SHAREForCures\Development\1. MVP Development\Internal Development\DALUsers\App.config"
//     Connection String Name: "SFCUsersConn"
//     Connection String:      "Data Source=sfcusers.cswvgqf4hyhq.us-east-1.rds.amazonaws.com;Initial Catalog=Users;User id=SFCUsersMaster;password=**zapped**;;Application Name=DALUsers"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Web Edition (64-bit)
// Database Engine Edition: Standard

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace DAL.Users
{
    using System.Linq;

    #region Unit of work

    public interface ISFCUsersContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<TAccountStatu> TAccountStatus { get; set; } // tAccountStatus
        System.Data.Entity.DbSet<TCountry> TCountries { get; set; } // tCountry
        System.Data.Entity.DbSet<TEthnicity> TEthnicities { get; set; } // tEthnicity
        System.Data.Entity.DbSet<TGender> TGenders { get; set; } // tGender
        System.Data.Entity.DbSet<TLanguage> TLanguages { get; set; } // tLanguage
        System.Data.Entity.DbSet<TMaritalStatus> TMaritalStatus { get; set; } // tMaritalStatuses
        System.Data.Entity.DbSet<TRace> Traces { get; set; } // tRace
        System.Data.Entity.DbSet<TSalt> TSalts { get; set; } // tSalts
        System.Data.Entity.DbSet<TSex> TSexes { get; set; } // tSex
        System.Data.Entity.DbSet<TState> TStates { get; set; } // tStates
        System.Data.Entity.DbSet<TTimeZone> TTimeZones { get; set; } // tTimeZone
        System.Data.Entity.DbSet<TUser> TUsers { get; set; } // tUsers
        System.Data.Entity.DbSet<TUsersAddressHistory> TUsersAddressHistories { get; set; } // tUsersAddressHistory
        System.Data.Entity.DbSet<TUsersAudit> TUsersAudits { get; set; } // tUsersAudit
        System.Data.Entity.DbSet<TUsersAuditObject> TUsersAuditObjects { get; set; } // tUsersAuditObjects
        System.Data.Entity.DbSet<TUsersErrLog> TUsersErrLogs { get; set; } // tUsersErrLog
        System.Data.Entity.DbSet<TXrefUsersMaritalStatu> TXrefUsersMaritalStatus { get; set; } // tXrefUsersMaritalStatus

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);

        // Stored Procedures
        System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst();
        System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusLstReturnModel>> SpAccountStatusLstAsync();

        System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id);
        System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusSelReturnModel>> SpAccountStatusSelAsync(int? id);

        System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst();
        System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountryLstReturnModel>> SpCountryLstAsync();

        System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id);
        System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountrySelReturnModel>> SpCountrySelAsync(int? id);

        int SpEthnicityDel(int? id);
        // SpEthnicityDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst();
        System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityLstReturnModel>> SpEthnicityLstAsync();

        System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id);
        System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicitySelReturnModel>> SpEthnicitySelAsync(int? id);

        System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity);
        System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityUpsReturnModel>> SpEthnicityUpsAsync(int? id, string ethnicity);

        int SpGenderDel(int? id);
        // SpGenderDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst();
        System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderLstReturnModel>> SpGenderLstAsync();

        System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id);
        System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderSelReturnModel>> SpGenderSelAsync(int? id);

        System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender);
        System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderUpsReturnModel>> SpGenderUpsAsync(int? id, string gender);

        int SpGetUserProfile(int? id, string username);
        // SpGetUserProfileAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpLanguageDel(int? id);
        // SpLanguageDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst();
        System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageLstReturnModel>> SpLanguageLstAsync();

        System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id);
        System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageSelReturnModel>> SpLanguageSelAsync(int? id);

        System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language);
        System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageUpsReturnModel>> SpLanguageUpsAsync(int? id, string language);

        int SpMaritalStatusDel(int? id);
        // SpMaritalStatusDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpMaritalStatusLst();
        // SpMaritalStatusLstAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpMaritalStatusSel(int? id);
        // SpMaritalStatusSelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpMaritalStatusUps(int? id, string maritalStatus);
        // SpMaritalStatusUpsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpRaceDel(int? id);
        // SpRaceDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst();
        System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceLstReturnModel>> SpRaceLstAsync();

        System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id);
        System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceSelReturnModel>> SpRaceSelAsync(int? id);

        System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race);
        System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceUpsReturnModel>> SpRaceUpsAsync(int? id, string race);

        int SpSaltsDel(int? id);
        // SpSaltsDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst();
        System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsLstReturnModel>> SpSaltsLstAsync();

        System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id);
        System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsSelReturnModel>> SpSaltsSelAsync(int? id);

        System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt);
        System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsUpsReturnModel>> SpSaltsUpsAsync(int? id, string salt);

        System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst();
        System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexLstReturnModel>> SpSexLstAsync();

        System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id);
        System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexSelReturnModel>> SpSexSelAsync(int? id);

        System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst();
        System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesLstReturnModel>> SpStatesLstAsync();

        System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id);
        System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesSelReturnModel>> SpStatesSelAsync(int? id);

        System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst();
        System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneLstReturnModel>> SpTimeZoneLstAsync();

        System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id);
        System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneSelReturnModel>> SpTimeZoneSelAsync(int? id);

        int SpUsersDel(int? id);
        // SpUsersDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUsersLst();
        // SpUsersLstAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUsersSel(int? id);
        // SpUsersSelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUsersUps(int? id, string firstName, string middleName, string lastName, System.DateTime? dob, string address1, string address2, string city, int? stateId, string zip, int? countryId, int? languageId, int? timeZoneId, string email, string username, string passwordHash, int? phSaltId, int? sexId, int? genderId, int? maritalStatusId, int? raceId, int? ethnicityId, int? accountStatusId);
        // SpUsersUpsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUsersAuditDel(int? id);
        // SpUsersAuditDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst();
        System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditLstReturnModel>> SpUsersAuditLstAsync();

        System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id);
        System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditSelReturnModel>> SpUsersAuditSelAsync(int? id);

        int SpUsersErrLogDel(int? id);
        // SpUsersErrLogDelAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst();
        System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogLstReturnModel>> SpUsersErrLogLstAsync();

        System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id);
        System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogSelReturnModel>> SpUsersErrLogSelAsync(int? id);

        System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace);
        System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogUpsReturnModel>> SpUsersErrLogUpsAsync(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace);

        System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo);
        System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel>> SpWriteSqlErrToUsersErrLogAsync(int? objectId, int? databaseId, string details, string additionalInfo);

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SFCUsersContext : System.Data.Entity.DbContext, ISFCUsersContext
    {
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TAccountStatu> TAccountStatus { get; set; } // tAccountStatus
        public System.Data.Entity.DbSet<TCountry> TCountries { get; set; } // tCountry
        public System.Data.Entity.DbSet<TEthnicity> TEthnicities { get; set; } // tEthnicity
        public System.Data.Entity.DbSet<TGender> TGenders { get; set; } // tGender
        public System.Data.Entity.DbSet<TLanguage> TLanguages { get; set; } // tLanguage
        public System.Data.Entity.DbSet<TMaritalStatus> TMaritalStatus { get; set; } // tMaritalStatuses
        public System.Data.Entity.DbSet<TRace> Traces { get; set; } // tRace
        public System.Data.Entity.DbSet<TSalt> TSalts { get; set; } // tSalts
        public System.Data.Entity.DbSet<TSex> TSexes { get; set; } // tSex
        public System.Data.Entity.DbSet<TState> TStates { get; set; } // tStates
        public System.Data.Entity.DbSet<TTimeZone> TTimeZones { get; set; } // tTimeZone
        public System.Data.Entity.DbSet<TUser> TUsers { get; set; } // tUsers
        public System.Data.Entity.DbSet<TUsersAddressHistory> TUsersAddressHistories { get; set; } // tUsersAddressHistory
        public System.Data.Entity.DbSet<TUsersAudit> TUsersAudits { get; set; } // tUsersAudit
        public System.Data.Entity.DbSet<TUsersAuditObject> TUsersAuditObjects { get; set; } // tUsersAuditObjects
        public System.Data.Entity.DbSet<TUsersErrLog> TUsersErrLogs { get; set; } // tUsersErrLog
        public System.Data.Entity.DbSet<TXrefUsersMaritalStatu> TXrefUsersMaritalStatus { get; set; } // tXrefUsersMaritalStatus

        static SFCUsersContext()
        {
            System.Data.Entity.Database.SetInitializer<SFCUsersContext>(null);
        }

        public SFCUsersContext()
            : base("Name=SFCUsersConn")
        {
        }

        public SFCUsersContext(string connectionString)
            : base(connectionString)
        {
        }

        public SFCUsersContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public SFCUsersContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public SFCUsersContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TAccountStatuConfiguration());
            modelBuilder.Configurations.Add(new TCountryConfiguration());
            modelBuilder.Configurations.Add(new TEthnicityConfiguration());
            modelBuilder.Configurations.Add(new TGenderConfiguration());
            modelBuilder.Configurations.Add(new TLanguageConfiguration());
            modelBuilder.Configurations.Add(new TMaritalStatusConfiguration());
            modelBuilder.Configurations.Add(new TRaceConfiguration());
            modelBuilder.Configurations.Add(new TSaltConfiguration());
            modelBuilder.Configurations.Add(new TSexConfiguration());
            modelBuilder.Configurations.Add(new TStateConfiguration());
            modelBuilder.Configurations.Add(new TTimeZoneConfiguration());
            modelBuilder.Configurations.Add(new TUserConfiguration());
            modelBuilder.Configurations.Add(new TUsersAddressHistoryConfiguration());
            modelBuilder.Configurations.Add(new TUsersAuditConfiguration());
            modelBuilder.Configurations.Add(new TUsersAuditObjectConfiguration());
            modelBuilder.Configurations.Add(new TUsersErrLogConfiguration());
            modelBuilder.Configurations.Add(new TXrefUsersMaritalStatuConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TAccountStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new TCountryConfiguration(schema));
            modelBuilder.Configurations.Add(new TEthnicityConfiguration(schema));
            modelBuilder.Configurations.Add(new TGenderConfiguration(schema));
            modelBuilder.Configurations.Add(new TLanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new TMaritalStatusConfiguration(schema));
            modelBuilder.Configurations.Add(new TRaceConfiguration(schema));
            modelBuilder.Configurations.Add(new TSaltConfiguration(schema));
            modelBuilder.Configurations.Add(new TSexConfiguration(schema));
            modelBuilder.Configurations.Add(new TStateConfiguration(schema));
            modelBuilder.Configurations.Add(new TTimeZoneConfiguration(schema));
            modelBuilder.Configurations.Add(new TUserConfiguration(schema));
            modelBuilder.Configurations.Add(new TUsersAddressHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new TUsersAuditConfiguration(schema));
            modelBuilder.Configurations.Add(new TUsersAuditObjectConfiguration(schema));
            modelBuilder.Configurations.Add(new TUsersErrLogConfiguration(schema));
            modelBuilder.Configurations.Add(new TXrefUsersMaritalStatuConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst()
        {
            int procResult;
            return SpAccountStatusLst(out procResult);
        }

        public System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpAccountStatusLstReturnModel>("EXEC @procResult = [dbo].[spAccountStatus_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusLstReturnModel>> SpAccountStatusLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpAccountStatusLstReturnModel>("EXEC [dbo].[spAccountStatus_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id)
        {
            int procResult;
            return SpAccountStatusSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpAccountStatusSelReturnModel>("EXEC @procResult = [dbo].[spAccountStatus_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusSelReturnModel>> SpAccountStatusSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpAccountStatusSelReturnModel>("EXEC [dbo].[spAccountStatus_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst()
        {
            int procResult;
            return SpCountryLst(out procResult);
        }

        public System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpCountryLstReturnModel>("EXEC @procResult = [dbo].[spCountry_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountryLstReturnModel>> SpCountryLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpCountryLstReturnModel>("EXEC [dbo].[spCountry_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id)
        {
            int procResult;
            return SpCountrySel(id, out procResult);
        }

        public System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpCountrySelReturnModel>("EXEC @procResult = [dbo].[spCountry_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountrySelReturnModel>> SpCountrySelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpCountrySelReturnModel>("EXEC [dbo].[spCountry_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public int SpEthnicityDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spEthnicity_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst()
        {
            int procResult;
            return SpEthnicityLst(out procResult);
        }

        public System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEthnicityLstReturnModel>("EXEC @procResult = [dbo].[spEthnicity_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityLstReturnModel>> SpEthnicityLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpEthnicityLstReturnModel>("EXEC [dbo].[spEthnicity_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id)
        {
            int procResult;
            return SpEthnicitySel(id, out procResult);
        }

        public System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEthnicitySelReturnModel>("EXEC @procResult = [dbo].[spEthnicity_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicitySelReturnModel>> SpEthnicitySelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpEthnicitySelReturnModel>("EXEC [dbo].[spEthnicity_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity)
        {
            int procResult;
            return SpEthnicityUps(id, ethnicity, out procResult);
        }

        public System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpEthnicityUpsReturnModel>("EXEC @procResult = [dbo].[spEthnicity_ups] @Id, @Ethnicity", idParam, ethnicityParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityUpsReturnModel>> SpEthnicityUpsAsync(int? id, string ethnicity)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var ethnicityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ethnicity", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = ethnicity, Size = 50 };
            if (ethnicityParam.Value == null)
                ethnicityParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpEthnicityUpsReturnModel>("EXEC [dbo].[spEthnicity_ups] @Id, @Ethnicity", idParam, ethnicityParam).ToListAsync();

            return procResultData;
        }

        public int SpGenderDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spGender_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst()
        {
            int procResult;
            return SpGenderLst(out procResult);
        }

        public System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGenderLstReturnModel>("EXEC @procResult = [dbo].[spGender_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderLstReturnModel>> SpGenderLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpGenderLstReturnModel>("EXEC [dbo].[spGender_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id)
        {
            int procResult;
            return SpGenderSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGenderSelReturnModel>("EXEC @procResult = [dbo].[spGender_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderSelReturnModel>> SpGenderSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGenderSelReturnModel>("EXEC [dbo].[spGender_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender)
        {
            int procResult;
            return SpGenderUps(id, gender, out procResult);
        }

        public System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 50 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGenderUpsReturnModel>("EXEC @procResult = [dbo].[spGender_ups] @Id, @Gender", idParam, genderParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderUpsReturnModel>> SpGenderUpsAsync(int? id, string gender)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 50 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGenderUpsReturnModel>("EXEC [dbo].[spGender_ups] @Id, @Gender", idParam, genderParam).ToListAsync();

            return procResultData;
        }

        public int SpGetUserProfile(int? id, string username)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@username", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spGetUserProfile] @id, @username", idParam, usernameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpLanguageDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spLanguage_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst()
        {
            int procResult;
            return SpLanguageLst(out procResult);
        }

        public System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLanguageLstReturnModel>("EXEC @procResult = [dbo].[spLanguage_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageLstReturnModel>> SpLanguageLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpLanguageLstReturnModel>("EXEC [dbo].[spLanguage_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id)
        {
            int procResult;
            return SpLanguageSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLanguageSelReturnModel>("EXEC @procResult = [dbo].[spLanguage_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageSelReturnModel>> SpLanguageSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLanguageSelReturnModel>("EXEC [dbo].[spLanguage_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language)
        {
            int procResult;
            return SpLanguageUps(id, language, out procResult);
        }

        public System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var languageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Language", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = language, Size = 50 };
            if (languageParam.Value == null)
                languageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpLanguageUpsReturnModel>("EXEC @procResult = [dbo].[spLanguage_ups] @Id, @Language", idParam, languageParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageUpsReturnModel>> SpLanguageUpsAsync(int? id, string language)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var languageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Language", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = language, Size = 50 };
            if (languageParam.Value == null)
                languageParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpLanguageUpsReturnModel>("EXEC [dbo].[spLanguage_ups] @Id, @Language", idParam, languageParam).ToListAsync();

            return procResultData;
        }

        public int SpMaritalStatusDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spMaritalStatus_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpMaritalStatusLst()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spMaritalStatus_lst] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpMaritalStatusSel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spMaritalStatus_sel] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpMaritalStatusUps(int? id, string maritalStatus)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 50 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spMaritalStatus_ups] @Id, @MaritalStatus", idParam, maritalStatusParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpRaceDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spRace_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst()
        {
            int procResult;
            return SpRaceLst(out procResult);
        }

        public System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpRaceLstReturnModel>("EXEC @procResult = [dbo].[spRace_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceLstReturnModel>> SpRaceLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpRaceLstReturnModel>("EXEC [dbo].[spRace_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id)
        {
            int procResult;
            return SpRaceSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpRaceSelReturnModel>("EXEC @procResult = [dbo].[spRace_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceSelReturnModel>> SpRaceSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpRaceSelReturnModel>("EXEC [dbo].[spRace_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race)
        {
            int procResult;
            return SpRaceUps(id, race, out procResult);
        }

        public System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var raceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Race", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = race, Size = 50 };
            if (raceParam.Value == null)
                raceParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpRaceUpsReturnModel>("EXEC @procResult = [dbo].[spRace_ups] @Id, @Race", idParam, raceParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceUpsReturnModel>> SpRaceUpsAsync(int? id, string race)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var raceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Race", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = race, Size = 50 };
            if (raceParam.Value == null)
                raceParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpRaceUpsReturnModel>("EXEC [dbo].[spRace_ups] @Id, @Race", idParam, raceParam).ToListAsync();

            return procResultData;
        }

        public int SpSaltsDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spSalts_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst()
        {
            int procResult;
            return SpSaltsLst(out procResult);
        }

        public System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpSaltsLstReturnModel>("EXEC @procResult = [dbo].[spSalts_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsLstReturnModel>> SpSaltsLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpSaltsLstReturnModel>("EXEC [dbo].[spSalts_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id)
        {
            int procResult;
            return SpSaltsSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpSaltsSelReturnModel>("EXEC @procResult = [dbo].[spSalts_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsSelReturnModel>> SpSaltsSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpSaltsSelReturnModel>("EXEC [dbo].[spSalts_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt)
        {
            int procResult;
            return SpSaltsUps(id, salt, out procResult);
        }

        public System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var saltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Salt", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = salt, Size = 256 };
            if (saltParam.Value == null)
                saltParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpSaltsUpsReturnModel>("EXEC @procResult = [dbo].[spSalts_ups] @Id, @Salt", idParam, saltParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsUpsReturnModel>> SpSaltsUpsAsync(int? id, string salt)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var saltParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Salt", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = salt, Size = 256 };
            if (saltParam.Value == null)
                saltParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpSaltsUpsReturnModel>("EXEC [dbo].[spSalts_ups] @Id, @Salt", idParam, saltParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst()
        {
            int procResult;
            return SpSexLst(out procResult);
        }

        public System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpSexLstReturnModel>("EXEC @procResult = [dbo].[spSex_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexLstReturnModel>> SpSexLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpSexLstReturnModel>("EXEC [dbo].[spSex_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id)
        {
            int procResult;
            return SpSexSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpSexSelReturnModel>("EXEC @procResult = [dbo].[spSex_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexSelReturnModel>> SpSexSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpSexSelReturnModel>("EXEC [dbo].[spSex_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst()
        {
            int procResult;
            return SpStatesLst(out procResult);
        }

        public System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpStatesLstReturnModel>("EXEC @procResult = [dbo].[spStates_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesLstReturnModel>> SpStatesLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpStatesLstReturnModel>("EXEC [dbo].[spStates_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id)
        {
            int procResult;
            return SpStatesSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpStatesSelReturnModel>("EXEC @procResult = [dbo].[spStates_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesSelReturnModel>> SpStatesSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpStatesSelReturnModel>("EXEC [dbo].[spStates_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst()
        {
            int procResult;
            return SpTimeZoneLst(out procResult);
        }

        public System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTimeZoneLstReturnModel>("EXEC @procResult = [dbo].[spTimeZone_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneLstReturnModel>> SpTimeZoneLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpTimeZoneLstReturnModel>("EXEC [dbo].[spTimeZone_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id)
        {
            int procResult;
            return SpTimeZoneSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpTimeZoneSelReturnModel>("EXEC @procResult = [dbo].[spTimeZone_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneSelReturnModel>> SpTimeZoneSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpTimeZoneSelReturnModel>("EXEC [dbo].[spTimeZone_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public int SpUsersDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsers_del] @ID", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpUsersLst()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsers_lst] ", procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpUsersSel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsers_sel] @ID", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpUsersUps(int? id, string firstName, string middleName, string lastName, System.DateTime? dob, string address1, string address2, string city, int? stateId, string zip, int? countryId, int? languageId, int? timeZoneId, string email, string username, string passwordHash, int? phSaltId, int? sexId, int? genderId, int? maritalStatusId, int? raceId, int? ethnicityId, int? accountStatusId)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var firstNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FirstName", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = firstName, Size = 50 };
            if (firstNameParam.Value == null)
                firstNameParam.Value = System.DBNull.Value;

            var middleNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MiddleName", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = middleName, Size = 50 };
            if (middleNameParam.Value == null)
                middleNameParam.Value = System.DBNull.Value;

            var lastNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LastName", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = lastName, Size = 50 };
            if (lastNameParam.Value == null)
                lastNameParam.Value = System.DBNull.Value;

            var dobParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DOB", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = dob.GetValueOrDefault() };
            if (!dob.HasValue)
                dobParam.Value = System.DBNull.Value;

            var address1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address1", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = address1, Size = 255 };
            if (address1Param.Value == null)
                address1Param.Value = System.DBNull.Value;

            var address2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@Address2", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = address2, Size = 255 };
            if (address2Param.Value == null)
                address2Param.Value = System.DBNull.Value;

            var cityParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@City", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = city, Size = 255 };
            if (cityParam.Value == null)
                cityParam.Value = System.DBNull.Value;

            var stateIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StateID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = stateId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!stateId.HasValue)
                stateIdParam.Value = System.DBNull.Value;

            var zipParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Zip", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = zip, Size = 12 };
            if (zipParam.Value == null)
                zipParam.Value = System.DBNull.Value;

            var countryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CountryID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = countryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!countryId.HasValue)
                countryIdParam.Value = System.DBNull.Value;

            var languageIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LanguageID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = languageId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!languageId.HasValue)
                languageIdParam.Value = System.DBNull.Value;

            var timeZoneIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeZoneID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeZoneId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeZoneId.HasValue)
                timeZoneIdParam.Value = System.DBNull.Value;

            var emailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Email", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = email, Size = 320 };
            if (emailParam.Value == null)
                emailParam.Value = System.DBNull.Value;

            var usernameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Username", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = username, Size = 50 };
            if (usernameParam.Value == null)
                usernameParam.Value = System.DBNull.Value;

            var passwordHashParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PasswordHash", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = passwordHash };
            if (passwordHashParam.Value == null)
                passwordHashParam.Value = System.DBNull.Value;

            var phSaltIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PHSaltID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = phSaltId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!phSaltId.HasValue)
                phSaltIdParam.Value = System.DBNull.Value;

            var sexIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SexID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sexId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sexId.HasValue)
                sexIdParam.Value = System.DBNull.Value;

            var genderIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@GenderID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = genderId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!genderId.HasValue)
                genderIdParam.Value = System.DBNull.Value;

            var maritalStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = maritalStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!maritalStatusId.HasValue)
                maritalStatusIdParam.Value = System.DBNull.Value;

            var raceIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RaceID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = raceId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!raceId.HasValue)
                raceIdParam.Value = System.DBNull.Value;

            var ethnicityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EthnicityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ethnicityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ethnicityId.HasValue)
                ethnicityIdParam.Value = System.DBNull.Value;

            var accountStatusIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AccountStatusID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = accountStatusId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accountStatusId.HasValue)
                accountStatusIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsers_ups] @Id, @FirstName, @MiddleName, @LastName, @DOB, @Address1, @Address2, @City, @StateID, @Zip, @CountryID, @LanguageID, @TimeZoneID, @Email, @Username, @PasswordHash, @PHSaltID, @SexID, @GenderID, @MaritalStatusID, @RaceID, @EthnicityID, @AccountStatusID", idParam, firstNameParam, middleNameParam, lastNameParam, dobParam, address1Param, address2Param, cityParam, stateIdParam, zipParam, countryIdParam, languageIdParam, timeZoneIdParam, emailParam, usernameParam, passwordHashParam, phSaltIdParam, sexIdParam, genderIdParam, maritalStatusIdParam, raceIdParam, ethnicityIdParam, accountStatusIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public int SpUsersAuditDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsersAudit_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst()
        {
            int procResult;
            return SpUsersAuditLst(out procResult);
        }

        public System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersAuditLstReturnModel>("EXEC @procResult = [dbo].[spUsersAudit_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditLstReturnModel>> SpUsersAuditLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpUsersAuditLstReturnModel>("EXEC [dbo].[spUsersAudit_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id)
        {
            int procResult;
            return SpUsersAuditSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersAuditSelReturnModel>("EXEC @procResult = [dbo].[spUsersAudit_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditSelReturnModel>> SpUsersAuditSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpUsersAuditSelReturnModel>("EXEC [dbo].[spUsersAudit_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public int SpUsersErrLogDel(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[spUsersErrLog_del] @Id", idParam, procResultParam);

            return (int)procResultParam.Value;
        }

        public System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst()
        {
            int procResult;
            return SpUsersErrLogLst(out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersErrLogLstReturnModel>("EXEC @procResult = [dbo].[spUsersErrLog_lst] ", procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogLstReturnModel>> SpUsersErrLogLstAsync()
        {
            var procResultData = await Database.SqlQuery<SpUsersErrLogLstReturnModel>("EXEC [dbo].[spUsersErrLog_lst] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id)
        {
            int procResult;
            return SpUsersErrLogSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersErrLogSelReturnModel>("EXEC @procResult = [dbo].[spUsersErrLog_sel] @Id", idParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogSelReturnModel>> SpUsersErrLogSelAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpUsersErrLogSelReturnModel>("EXEC [dbo].[spUsersErrLog_sel] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace)
        {
            int procResult;
            return SpUsersErrLogUps(id, errTypeId, errSourceId, code, description, trace, out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var errTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = errTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!errTypeId.HasValue)
                errTypeIdParam.Value = System.DBNull.Value;

            var errSourceIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrSourceID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = errSourceId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!errSourceId.HasValue)
                errSourceIdParam.Value = System.DBNull.Value;

            var codeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Code", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = code, Size = 50 };
            if (codeParam.Value == null)
                codeParam.Value = System.DBNull.Value;

            var descriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Description", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = description };
            if (descriptionParam.Value == null)
                descriptionParam.Value = System.DBNull.Value;

            var traceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Trace", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = trace };
            if (traceParam.Value == null)
                traceParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpUsersErrLogUpsReturnModel>("EXEC @procResult = [dbo].[spUsersErrLog_ups] @Id, @ErrTypeID, @ErrSourceID, @Code, @Description, @Trace", idParam, errTypeIdParam, errSourceIdParam, codeParam, descriptionParam, traceParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogUpsReturnModel>> SpUsersErrLogUpsAsync(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var errTypeIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrTypeID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = errTypeId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!errTypeId.HasValue)
                errTypeIdParam.Value = System.DBNull.Value;

            var errSourceIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrSourceID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = errSourceId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!errSourceId.HasValue)
                errSourceIdParam.Value = System.DBNull.Value;

            var codeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Code", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = code, Size = 50 };
            if (codeParam.Value == null)
                codeParam.Value = System.DBNull.Value;

            var descriptionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Description", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = description };
            if (descriptionParam.Value == null)
                descriptionParam.Value = System.DBNull.Value;

            var traceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Trace", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = trace };
            if (traceParam.Value == null)
                traceParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpUsersErrLogUpsReturnModel>("EXEC [dbo].[spUsersErrLog_ups] @Id, @ErrTypeID, @ErrSourceID, @Code, @Description, @Trace", idParam, errTypeIdParam, errSourceIdParam, codeParam, descriptionParam, traceParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo)
        {
            int procResult;
            return SpWriteSqlErrToUsersErrLog(objectId, databaseId, details, additionalInfo, out procResult);
        }

        public System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo, out int procResult)
        {
            var objectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObjectID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = objectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!objectId.HasValue)
                objectIdParam.Value = System.DBNull.Value;

            var databaseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DatabaseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = databaseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!databaseId.HasValue)
                databaseIdParam.Value = System.DBNull.Value;

            var detailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Details", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = details };
            if (detailsParam.Value == null)
                detailsParam.Value = System.DBNull.Value;

            var additionalInfoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AdditionalInfo", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = additionalInfo };
            if (additionalInfoParam.Value == null)
                additionalInfoParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpWriteSqlErrToUsersErrLogReturnModel>("EXEC @procResult = [dbo].[spWriteSQLErrToUsersErrLog] @ObjectID, @DatabaseID, @Details, @AdditionalInfo", objectIdParam, databaseIdParam, detailsParam, additionalInfoParam, procResultParam).ToList();

            procResult = (int)procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel>> SpWriteSqlErrToUsersErrLogAsync(int? objectId, int? databaseId, string details, string additionalInfo)
        {
            var objectIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ObjectID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = objectId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!objectId.HasValue)
                objectIdParam.Value = System.DBNull.Value;

            var databaseIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DatabaseID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = databaseId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!databaseId.HasValue)
                databaseIdParam.Value = System.DBNull.Value;

            var detailsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Details", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = details };
            if (detailsParam.Value == null)
                detailsParam.Value = System.DBNull.Value;

            var additionalInfoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AdditionalInfo", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = additionalInfo };
            if (additionalInfoParam.Value == null)
                additionalInfoParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpWriteSqlErrToUsersErrLogReturnModel>("EXEC [dbo].[spWriteSQLErrToUsersErrLog] @ObjectID, @DatabaseID, @Details, @AdditionalInfo", objectIdParam, databaseIdParam, detailsParam, additionalInfoParam).ToListAsync();

            return procResultData;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeSFCUsersContext : ISFCUsersContext
    {
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TAccountStatu> TAccountStatus { get; set; }
        public System.Data.Entity.DbSet<TCountry> TCountries { get; set; }
        public System.Data.Entity.DbSet<TEthnicity> TEthnicities { get; set; }
        public System.Data.Entity.DbSet<TGender> TGenders { get; set; }
        public System.Data.Entity.DbSet<TLanguage> TLanguages { get; set; }
        public System.Data.Entity.DbSet<TMaritalStatus> TMaritalStatus { get; set; }
        public System.Data.Entity.DbSet<TRace> Traces { get; set; }
        public System.Data.Entity.DbSet<TSalt> TSalts { get; set; }
        public System.Data.Entity.DbSet<TSex> TSexes { get; set; }
        public System.Data.Entity.DbSet<TState> TStates { get; set; }
        public System.Data.Entity.DbSet<TTimeZone> TTimeZones { get; set; }
        public System.Data.Entity.DbSet<TUser> TUsers { get; set; }
        public System.Data.Entity.DbSet<TUsersAddressHistory> TUsersAddressHistories { get; set; }
        public System.Data.Entity.DbSet<TUsersAudit> TUsersAudits { get; set; }
        public System.Data.Entity.DbSet<TUsersAuditObject> TUsersAuditObjects { get; set; }
        public System.Data.Entity.DbSet<TUsersErrLog> TUsersErrLogs { get; set; }
        public System.Data.Entity.DbSet<TXrefUsersMaritalStatu> TXrefUsersMaritalStatus { get; set; }

        public FakeSFCUsersContext()
        {
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TAccountStatus = new FakeDbSet<TAccountStatu>("Id");
            TCountries = new FakeDbSet<TCountry>("Id");
            TEthnicities = new FakeDbSet<TEthnicity>("Id");
            TGenders = new FakeDbSet<TGender>("Id");
            TLanguages = new FakeDbSet<TLanguage>("Id");
            TMaritalStatus = new FakeDbSet<TMaritalStatus>("Id");
            Traces = new FakeDbSet<TRace>("Id");
            TSalts = new FakeDbSet<TSalt>("Id");
            TSexes = new FakeDbSet<TSex>("Id");
            TStates = new FakeDbSet<TState>("Id");
            TTimeZones = new FakeDbSet<TTimeZone>("Id");
            TUsers = new FakeDbSet<TUser>("Id");
            TUsersAddressHistories = new FakeDbSet<TUsersAddressHistory>("Id");
            TUsersAudits = new FakeDbSet<TUsersAudit>("Id");
            TUsersAuditObjects = new FakeDbSet<TUsersAuditObject>("Id");
            TUsersErrLogs = new FakeDbSet<TUsersErrLog>("Id");
            TXrefUsersMaritalStatus = new FakeDbSet<TXrefUsersMaritalStatu>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst()
        {
            int procResult;
            return SpAccountStatusLst(out procResult);
        }

        public System.Collections.Generic.List<SpAccountStatusLstReturnModel> SpAccountStatusLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpAccountStatusLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusLstReturnModel>> SpAccountStatusLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpAccountStatusLst(out procResult));
        }

        public System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id)
        {
            int procResult;
            return SpAccountStatusSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpAccountStatusSelReturnModel> SpAccountStatusSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpAccountStatusSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpAccountStatusSelReturnModel>> SpAccountStatusSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpAccountStatusSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst()
        {
            int procResult;
            return SpCountryLst(out procResult);
        }

        public System.Collections.Generic.List<SpCountryLstReturnModel> SpCountryLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpCountryLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountryLstReturnModel>> SpCountryLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpCountryLst(out procResult));
        }

        public System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id)
        {
            int procResult;
            return SpCountrySel(id, out procResult);
        }

        public System.Collections.Generic.List<SpCountrySelReturnModel> SpCountrySel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpCountrySelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpCountrySelReturnModel>> SpCountrySelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpCountrySel(id, out procResult));
        }

        public int SpEthnicityDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst()
        {
            int procResult;
            return SpEthnicityLst(out procResult);
        }

        public System.Collections.Generic.List<SpEthnicityLstReturnModel> SpEthnicityLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpEthnicityLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityLstReturnModel>> SpEthnicityLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpEthnicityLst(out procResult));
        }

        public System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id)
        {
            int procResult;
            return SpEthnicitySel(id, out procResult);
        }

        public System.Collections.Generic.List<SpEthnicitySelReturnModel> SpEthnicitySel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpEthnicitySelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicitySelReturnModel>> SpEthnicitySelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpEthnicitySel(id, out procResult));
        }

        public System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity)
        {
            int procResult;
            return SpEthnicityUps(id, ethnicity, out procResult);
        }

        public System.Collections.Generic.List<SpEthnicityUpsReturnModel> SpEthnicityUps(int? id, string ethnicity, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpEthnicityUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpEthnicityUpsReturnModel>> SpEthnicityUpsAsync(int? id, string ethnicity)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpEthnicityUps(id, ethnicity, out procResult));
        }

        public int SpGenderDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst()
        {
            int procResult;
            return SpGenderLst(out procResult);
        }

        public System.Collections.Generic.List<SpGenderLstReturnModel> SpGenderLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGenderLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderLstReturnModel>> SpGenderLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGenderLst(out procResult));
        }

        public System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id)
        {
            int procResult;
            return SpGenderSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpGenderSelReturnModel> SpGenderSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGenderSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderSelReturnModel>> SpGenderSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGenderSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender)
        {
            int procResult;
            return SpGenderUps(id, gender, out procResult);
        }

        public System.Collections.Generic.List<SpGenderUpsReturnModel> SpGenderUps(int? id, string gender, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpGenderUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpGenderUpsReturnModel>> SpGenderUpsAsync(int? id, string gender)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpGenderUps(id, gender, out procResult));
        }

        public int SpGetUserProfile(int? id, string username)
        {

            return 0;
        }

        public int SpLanguageDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst()
        {
            int procResult;
            return SpLanguageLst(out procResult);
        }

        public System.Collections.Generic.List<SpLanguageLstReturnModel> SpLanguageLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLanguageLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageLstReturnModel>> SpLanguageLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLanguageLst(out procResult));
        }

        public System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id)
        {
            int procResult;
            return SpLanguageSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpLanguageSelReturnModel> SpLanguageSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLanguageSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageSelReturnModel>> SpLanguageSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLanguageSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language)
        {
            int procResult;
            return SpLanguageUps(id, language, out procResult);
        }

        public System.Collections.Generic.List<SpLanguageUpsReturnModel> SpLanguageUps(int? id, string language, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpLanguageUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpLanguageUpsReturnModel>> SpLanguageUpsAsync(int? id, string language)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpLanguageUps(id, language, out procResult));
        }

        public int SpMaritalStatusDel(int? id)
        {

            return 0;
        }

        public int SpMaritalStatusLst()
        {

            return 0;
        }

        public int SpMaritalStatusSel(int? id)
        {

            return 0;
        }

        public int SpMaritalStatusUps(int? id, string maritalStatus)
        {

            return 0;
        }

        public int SpRaceDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst()
        {
            int procResult;
            return SpRaceLst(out procResult);
        }

        public System.Collections.Generic.List<SpRaceLstReturnModel> SpRaceLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpRaceLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceLstReturnModel>> SpRaceLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpRaceLst(out procResult));
        }

        public System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id)
        {
            int procResult;
            return SpRaceSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpRaceSelReturnModel> SpRaceSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpRaceSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceSelReturnModel>> SpRaceSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpRaceSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race)
        {
            int procResult;
            return SpRaceUps(id, race, out procResult);
        }

        public System.Collections.Generic.List<SpRaceUpsReturnModel> SpRaceUps(int? id, string race, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpRaceUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpRaceUpsReturnModel>> SpRaceUpsAsync(int? id, string race)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpRaceUps(id, race, out procResult));
        }

        public int SpSaltsDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst()
        {
            int procResult;
            return SpSaltsLst(out procResult);
        }

        public System.Collections.Generic.List<SpSaltsLstReturnModel> SpSaltsLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpSaltsLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsLstReturnModel>> SpSaltsLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpSaltsLst(out procResult));
        }

        public System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id)
        {
            int procResult;
            return SpSaltsSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpSaltsSelReturnModel> SpSaltsSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpSaltsSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsSelReturnModel>> SpSaltsSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpSaltsSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt)
        {
            int procResult;
            return SpSaltsUps(id, salt, out procResult);
        }

        public System.Collections.Generic.List<SpSaltsUpsReturnModel> SpSaltsUps(int? id, string salt, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpSaltsUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpSaltsUpsReturnModel>> SpSaltsUpsAsync(int? id, string salt)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpSaltsUps(id, salt, out procResult));
        }

        public System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst()
        {
            int procResult;
            return SpSexLst(out procResult);
        }

        public System.Collections.Generic.List<SpSexLstReturnModel> SpSexLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpSexLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexLstReturnModel>> SpSexLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpSexLst(out procResult));
        }

        public System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id)
        {
            int procResult;
            return SpSexSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpSexSelReturnModel> SpSexSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpSexSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpSexSelReturnModel>> SpSexSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpSexSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst()
        {
            int procResult;
            return SpStatesLst(out procResult);
        }

        public System.Collections.Generic.List<SpStatesLstReturnModel> SpStatesLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpStatesLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesLstReturnModel>> SpStatesLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpStatesLst(out procResult));
        }

        public System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id)
        {
            int procResult;
            return SpStatesSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpStatesSelReturnModel> SpStatesSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpStatesSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpStatesSelReturnModel>> SpStatesSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpStatesSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst()
        {
            int procResult;
            return SpTimeZoneLst(out procResult);
        }

        public System.Collections.Generic.List<SpTimeZoneLstReturnModel> SpTimeZoneLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTimeZoneLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneLstReturnModel>> SpTimeZoneLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTimeZoneLst(out procResult));
        }

        public System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id)
        {
            int procResult;
            return SpTimeZoneSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpTimeZoneSelReturnModel> SpTimeZoneSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpTimeZoneSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpTimeZoneSelReturnModel>> SpTimeZoneSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpTimeZoneSel(id, out procResult));
        }

        public int SpUsersDel(int? id)
        {

            return 0;
        }

        public int SpUsersLst()
        {

            return 0;
        }

        public int SpUsersSel(int? id)
        {

            return 0;
        }

        public int SpUsersUps(int? id, string firstName, string middleName, string lastName, System.DateTime? dob, string address1, string address2, string city, int? stateId, string zip, int? countryId, int? languageId, int? timeZoneId, string email, string username, string passwordHash, int? phSaltId, int? sexId, int? genderId, int? maritalStatusId, int? raceId, int? ethnicityId, int? accountStatusId)
        {

            return 0;
        }

        public int SpUsersAuditDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst()
        {
            int procResult;
            return SpUsersAuditLst(out procResult);
        }

        public System.Collections.Generic.List<SpUsersAuditLstReturnModel> SpUsersAuditLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersAuditLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditLstReturnModel>> SpUsersAuditLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsersAuditLst(out procResult));
        }

        public System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id)
        {
            int procResult;
            return SpUsersAuditSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpUsersAuditSelReturnModel> SpUsersAuditSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersAuditSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersAuditSelReturnModel>> SpUsersAuditSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsersAuditSel(id, out procResult));
        }

        public int SpUsersErrLogDel(int? id)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst()
        {
            int procResult;
            return SpUsersErrLogLst(out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogLstReturnModel> SpUsersErrLogLst(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersErrLogLstReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogLstReturnModel>> SpUsersErrLogLstAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsersErrLogLst(out procResult));
        }

        public System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id)
        {
            int procResult;
            return SpUsersErrLogSel(id, out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogSelReturnModel> SpUsersErrLogSel(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersErrLogSelReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogSelReturnModel>> SpUsersErrLogSelAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsersErrLogSel(id, out procResult));
        }

        public System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace)
        {
            int procResult;
            return SpUsersErrLogUps(id, errTypeId, errSourceId, code, description, trace, out procResult);
        }

        public System.Collections.Generic.List<SpUsersErrLogUpsReturnModel> SpUsersErrLogUps(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpUsersErrLogUpsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpUsersErrLogUpsReturnModel>> SpUsersErrLogUpsAsync(int? id, int? errTypeId, int? errSourceId, string code, string description, string trace)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpUsersErrLogUps(id, errTypeId, errSourceId, code, description, trace, out procResult));
        }

        public System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo)
        {
            int procResult;
            return SpWriteSqlErrToUsersErrLog(objectId, databaseId, details, additionalInfo, out procResult);
        }

        public System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel> SpWriteSqlErrToUsersErrLog(int? objectId, int? databaseId, string details, string additionalInfo, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpWriteSqlErrToUsersErrLogReturnModel>> SpWriteSqlErrToUsersErrLogAsync(int? objectId, int? databaseId, string details, string additionalInfo)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpWriteSqlErrToUsersErrLog(objectId, databaseId, details, additionalInfo, out procResult));
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // tAccountStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAccountStatu
    {
        public int Id { get; set; } // Id (Primary key)
        public string AccountStatus { get; set; } // AccountStatus (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tAccountStatus

        public TAccountStatu()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TCountry
    {
        public int Id { get; set; } // Id (Primary key)
        public string CountryName { get; set; } // CountryName (length: 50)
        public string CountryAbbrev { get; set; } // CountryAbbrev (length: 10)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TState> TStates { get; set; } // tStates.FK_tStates_tCountry

        public TCountry()
        {
            TStates = new System.Collections.Generic.List<TState>();
        }
    }

    // tEthnicity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TEthnicity
    {
        public int Id { get; set; } // Id (Primary key)
        public string Ethnicity { get; set; } // Ethnicity (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tEthnicity

        public TEthnicity()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tGender
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TGender
    {
        public int Id { get; set; } // Id (Primary key)
        public string Gender { get; set; } // Gender (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tGender

        public TGender()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TLanguage
    {
        public int Id { get; set; } // Id (Primary key)
        public string Language { get; set; } // Language (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tLanguage

        public TLanguage()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tMaritalStatuses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TMaritalStatus
    {
        public int Id { get; set; } // Id (Primary key)
        public string MaritalStatus { get; set; } // MaritalStatus (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TXrefUsersMaritalStatu> TXrefUsersMaritalStatus { get; set; } // tXrefUsersMaritalStatus.FK_tXrefUsersMaritalStatus_tMaritalStatuses

        public TMaritalStatus()
        {
            TXrefUsersMaritalStatus = new System.Collections.Generic.List<TXrefUsersMaritalStatu>();
        }
    }

    // tRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TRace
    {
        public int Id { get; set; } // Id (Primary key)
        public string Race { get; set; } // Race (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tRace

        public TRace()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tSalts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSalt
    {
        public int Id { get; set; } // Id (Primary key)
        public string Salt { get; set; } // Salt (length: 256)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tSalts

        public TSalt()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSex
    {
        public int Id { get; set; } // Id (Primary key)
        public string Sex { get; set; } // Sex (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUser> TUsers { get; set; } // tUsers.FK_tUsers_tSex

        public TSex()
        {
            TUsers = new System.Collections.Generic.List<TUser>();
        }
    }

    // tStates
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TState
    {
        public int Id { get; set; } // Id (Primary key)
        public string StateName { get; set; } // StateName (length: 50)
        public int CountryId { get; set; } // CountryID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUsersAddressHistory> TUsersAddressHistories { get; set; } // tUsersAddressHistory.FK_tUsersAddressHistory_tStates

        // Foreign keys
        public virtual TCountry TCountry { get; set; } // FK_tStates_tCountry

        public TState()
        {
            TUsersAddressHistories = new System.Collections.Generic.List<TUsersAddressHistory>();
        }
    }

    // tTimeZone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TTimeZone
    {
        public int Id { get; set; } // Id (Primary key)
        public string TimeZone { get; set; } // TimeZone (length: 50)
        public double? Offset { get; set; } // Offset

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUsersAddressHistory> TUsersAddressHistories { get; set; } // tUsersAddressHistory.FK_tUsersAddressHistory_tTimeZone

        public TTimeZone()
        {
            TUsersAddressHistories = new System.Collections.Generic.List<TUsersAddressHistory>();
        }
    }

    // tUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUser
    {
        public int Id { get; set; } // ID (Primary key)
        public System.Guid ExternalId { get; set; } // ExternalID
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public System.DateTime? Dob { get; set; } // DOB
        public int? LanguageId { get; set; } // LanguageID
        public string Email { get; set; } // Email (length: 320)
        public string Username { get; set; } // Username (length: 50)
        public string PasswordHash { get; set; } // PasswordHash
        public int PhSaltId { get; set; } // PHSaltID
        public int? SexId { get; set; } // SexID
        public int? GenderId { get; set; } // GenderID
        public int? RaceId { get; set; } // RaceID
        public int? EthnicityId { get; set; } // EthnicityID
        public int? AccountStatusId { get; set; } // AccountStatusID
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime
        public System.DateTime? LastUpdatedDateTime { get; set; } // LastUpdatedDateTime

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUsersAddressHistory> TUsersAddressHistories { get; set; } // tUsersAddressHistory.FK_tUsersAddressHistory_tUsers
        public virtual System.Collections.Generic.ICollection<TUsersAudit> TUsersAudits { get; set; } // tUsersAudit.FK_tUsersAudit_tUsers
        public virtual System.Collections.Generic.ICollection<TUsersErrLog> TUsersErrLogs { get; set; } // tUsersErrLog.FK_tUsersErrLog_tUsers
        public virtual System.Collections.Generic.ICollection<TXrefUsersMaritalStatu> TXrefUsersMaritalStatus { get; set; } // tXrefUsersMaritalStatus.FK_tXrefUsersMaritalStatus_tUsers

        // Foreign keys
        public virtual TAccountStatu TAccountStatu { get; set; } // FK_tUsers_tAccountStatus
        public virtual TEthnicity TEthnicity { get; set; } // FK_tUsers_tEthnicity
        public virtual TGender TGender { get; set; } // FK_tUsers_tGender
        public virtual TLanguage TLanguage { get; set; } // FK_tUsers_tLanguage
        public virtual TRace TRace { get; set; } // FK_tUsers_tRace
        public virtual TSalt TSalt { get; set; } // FK_tUsers_tSalts
        public virtual TSex TSex { get; set; } // FK_tUsers_tSex

        public TUser()
        {
            ExternalId = System.Guid.NewGuid();
            CreateDateTime = System.DateTime.Now;
            TUsersAddressHistories = new System.Collections.Generic.List<TUsersAddressHistory>();
            TUsersAudits = new System.Collections.Generic.List<TUsersAudit>();
            TUsersErrLogs = new System.Collections.Generic.List<TUsersErrLog>();
            TXrefUsersMaritalStatus = new System.Collections.Generic.List<TXrefUsersMaritalStatu>();
        }
    }

    // tUsersAddressHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAddressHistory
    {
        public int Id { get; set; } // ID (Primary key)
        public int UserId { get; set; } // UserID
        public int? TimeZoneId { get; set; } // TimeZoneID
        public string Address1 { get; set; } // Address1 (length: 255)
        public string Address2 { get; set; } // Address2 (length: 255)
        public string City { get; set; } // City (length: 255)
        public int? StateId { get; set; } // StateID
        public string Zip { get; set; } // Zip (length: 12)
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Foreign keys
        public virtual TState TState { get; set; } // FK_tUsersAddressHistory_tStates
        public virtual TTimeZone TTimeZone { get; set; } // FK_tUsersAddressHistory_tTimeZone
        public virtual TUser TUser { get; set; } // FK_tUsersAddressHistory_tUsers

        public TUsersAddressHistory()
        {
            CreateDateTime = System.DateTime.Now;
        }
    }

    // tUsersAudit
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAudit
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ApplicationId { get; set; } // ApplicationID
        public int? UserId { get; set; } // UserID
        public int EventId { get; set; } // EventID
        public int? ObjectId { get; set; } // ObjectID
        public string Description { get; set; } // Description (length: 100)
        public string OriginalValue { get; set; } // OriginalValue
        public string NewValue { get; set; } // NewValue
        public System.DateTime? DateTimeStamp { get; set; } // DateTimeStamp

        // Foreign keys
        public virtual TUser TUser { get; set; } // FK_tUsersAudit_tUsers
        public virtual TUsersAuditObject TUsersAuditObject { get; set; } // FK_tUsersAudit_tUsersAuditObjects

        public TUsersAudit()
        {
            ObjectId = 151;
            DateTimeStamp = System.DateTime.Now;
        }
    }

    // tUsersAuditObjects
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAuditObject
    {
        public int Id { get; set; } // ID (Primary key)
        public string TableName { get; set; } // TableName (length: 50)
        public string ColumnName { get; set; } // ColumnName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TUsersAudit> TUsersAudits { get; set; } // tUsersAudit.FK_tUsersAudit_tUsersAuditObjects

        public TUsersAuditObject()
        {
            TUsersAudits = new System.Collections.Generic.List<TUsersAudit>();
        }
    }

    // tUsersErrLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersErrLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int ErrTypeId { get; set; } // ErrTypeID
        public int ErrSourceId { get; set; } // ErrSourceID
        public string Code { get; set; } // Code (length: 50)
        public string Description { get; set; } // Description
        public string Trace { get; set; } // Trace
        public int? UserId { get; set; } // UserID
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Foreign keys
        public virtual TUser TUser { get; set; } // FK_tUsersErrLog_tUsers

        public TUsersErrLog()
        {
            CreateDateTime = System.DateTime.Now;
        }
    }

    // tXrefUsersMaritalStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TXrefUsersMaritalStatu
    {
        public int Id { get; set; } // ID (Primary key)
        public int UserId { get; set; } // UserID
        public int MaritalStatusId { get; set; } // MaritalStatusID

        // Foreign keys
        public virtual TMaritalStatus TMaritalStatus { get; set; } // FK_tXrefUsersMaritalStatus_tMaritalStatuses
        public virtual TUser TUser { get; set; } // FK_tXrefUsersMaritalStatus_tUsers
    }

    #endregion

    #region POCO Configuration

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // tAccountStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAccountStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TAccountStatu>
    {
        public TAccountStatuConfiguration()
            : this("dbo")
        {
        }

        public TAccountStatuConfiguration(string schema)
        {
            ToTable("tAccountStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AccountStatus).HasColumnName(@"AccountStatus").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tCountry
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TCountryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TCountry>
    {
        public TCountryConfiguration()
            : this("dbo")
        {
        }

        public TCountryConfiguration(string schema)
        {
            ToTable("tCountry", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CountryName).HasColumnName(@"CountryName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.CountryAbbrev).HasColumnName(@"CountryAbbrev").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
        }
    }

    // tEthnicity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TEthnicityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TEthnicity>
    {
        public TEthnicityConfiguration()
            : this("dbo")
        {
        }

        public TEthnicityConfiguration(string schema)
        {
            ToTable("tEthnicity", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Ethnicity).HasColumnName(@"Ethnicity").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tGender
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TGenderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TGender>
    {
        public TGenderConfiguration()
            : this("dbo")
        {
        }

        public TGenderConfiguration(string schema)
        {
            ToTable("tGender", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Gender).HasColumnName(@"Gender").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tLanguage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TLanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TLanguage>
    {
        public TLanguageConfiguration()
            : this("dbo")
        {
        }

        public TLanguageConfiguration(string schema)
        {
            ToTable("tLanguage", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Language).HasColumnName(@"Language").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tMaritalStatuses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TMaritalStatusConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TMaritalStatus>
    {
        public TMaritalStatusConfiguration()
            : this("dbo")
        {
        }

        public TMaritalStatusConfiguration(string schema)
        {
            ToTable("tMaritalStatuses", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tRace
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TRaceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TRace>
    {
        public TRaceConfiguration()
            : this("dbo")
        {
        }

        public TRaceConfiguration(string schema)
        {
            ToTable("tRace", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Race).HasColumnName(@"Race").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tSalts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSaltConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSalt>
    {
        public TSaltConfiguration()
            : this("dbo")
        {
        }

        public TSaltConfiguration(string schema)
        {
            ToTable("tSalts", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Salt).HasColumnName(@"Salt").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(256);
        }
    }

    // tSex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSex>
    {
        public TSexConfiguration()
            : this("dbo")
        {
        }

        public TSexConfiguration(string schema)
        {
            ToTable("tSex", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Sex).HasColumnName(@"Sex").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tStates
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TStateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TState>
    {
        public TStateConfiguration()
            : this("dbo")
        {
        }

        public TStateConfiguration(string schema)
        {
            ToTable("tStates", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StateName).HasColumnName(@"StateName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.CountryId).HasColumnName(@"CountryID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.TCountry).WithMany(b => b.TStates).HasForeignKey(c => c.CountryId).WillCascadeOnDelete(false); // FK_tStates_tCountry
        }
    }

    // tTimeZone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TTimeZoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TTimeZone>
    {
        public TTimeZoneConfiguration()
            : this("dbo")
        {
        }

        public TTimeZoneConfiguration(string schema)
        {
            ToTable("tTimeZone", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TimeZone).HasColumnName(@"TimeZone").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.Offset).HasColumnName(@"Offset").IsOptional().HasColumnType("float");
        }
    }

    // tUsers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUser>
    {
        public TUserConfiguration()
            : this("dbo")
        {
        }

        public TUserConfiguration(string schema)
        {
            ToTable("tUsers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ExternalId).HasColumnName(@"ExternalID").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.Dob).HasColumnName(@"DOB").IsOptional().HasColumnType("date");
            Property(x => x.LanguageId).HasColumnName(@"LanguageID").IsOptional().HasColumnType("int");
            Property(x => x.Email).HasColumnName(@"Email").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(320);
            Property(x => x.Username).HasColumnName(@"Username").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").IsRequired().HasColumnType("nvarchar");
            Property(x => x.PhSaltId).HasColumnName(@"PHSaltID").IsRequired().HasColumnType("int");
            Property(x => x.SexId).HasColumnName(@"SexID").IsOptional().HasColumnType("int");
            Property(x => x.GenderId).HasColumnName(@"GenderID").IsOptional().HasColumnType("int");
            Property(x => x.RaceId).HasColumnName(@"RaceID").IsOptional().HasColumnType("int");
            Property(x => x.EthnicityId).HasColumnName(@"EthnicityID").IsOptional().HasColumnType("int");
            Property(x => x.AccountStatusId).HasColumnName(@"AccountStatusID").IsOptional().HasColumnType("int");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");
            Property(x => x.LastUpdatedDateTime).HasColumnName(@"LastUpdatedDateTime").IsOptional().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TAccountStatu).WithMany(b => b.TUsers).HasForeignKey(c => c.AccountStatusId).WillCascadeOnDelete(false); // FK_tUsers_tAccountStatus
            HasOptional(a => a.TEthnicity).WithMany(b => b.TUsers).HasForeignKey(c => c.EthnicityId).WillCascadeOnDelete(false); // FK_tUsers_tEthnicity
            HasOptional(a => a.TGender).WithMany(b => b.TUsers).HasForeignKey(c => c.GenderId).WillCascadeOnDelete(false); // FK_tUsers_tGender
            HasOptional(a => a.TLanguage).WithMany(b => b.TUsers).HasForeignKey(c => c.LanguageId).WillCascadeOnDelete(false); // FK_tUsers_tLanguage
            HasOptional(a => a.TRace).WithMany(b => b.TUsers).HasForeignKey(c => c.RaceId).WillCascadeOnDelete(false); // FK_tUsers_tRace
            HasOptional(a => a.TSex).WithMany(b => b.TUsers).HasForeignKey(c => c.SexId).WillCascadeOnDelete(false); // FK_tUsers_tSex
            HasRequired(a => a.TSalt).WithMany(b => b.TUsers).HasForeignKey(c => c.PhSaltId).WillCascadeOnDelete(false); // FK_tUsers_tSalts
        }
    }

    // tUsersAddressHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAddressHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUsersAddressHistory>
    {
        public TUsersAddressHistoryConfiguration()
            : this("dbo")
        {
        }

        public TUsersAddressHistoryConfiguration(string schema)
        {
            ToTable("tUsersAddressHistory", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").IsRequired().HasColumnType("int");
            Property(x => x.TimeZoneId).HasColumnName(@"TimeZoneID").IsOptional().HasColumnType("int");
            Property(x => x.Address1).HasColumnName(@"Address1").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(255);
            Property(x => x.Address2).HasColumnName(@"Address2").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(255);
            Property(x => x.City).HasColumnName(@"City").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(255);
            Property(x => x.StateId).HasColumnName(@"StateID").IsOptional().HasColumnType("int");
            Property(x => x.Zip).HasColumnName(@"Zip").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(12);
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TState).WithMany(b => b.TUsersAddressHistories).HasForeignKey(c => c.StateId).WillCascadeOnDelete(false); // FK_tUsersAddressHistory_tStates
            HasOptional(a => a.TTimeZone).WithMany(b => b.TUsersAddressHistories).HasForeignKey(c => c.TimeZoneId).WillCascadeOnDelete(false); // FK_tUsersAddressHistory_tTimeZone
            HasRequired(a => a.TUser).WithMany(b => b.TUsersAddressHistories).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tUsersAddressHistory_tUsers
        }
    }

    // tUsersAudit
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAuditConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUsersAudit>
    {
        public TUsersAuditConfiguration()
            : this("dbo")
        {
        }

        public TUsersAuditConfiguration(string schema)
        {
            ToTable("tUsersAudit", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationId).HasColumnName(@"ApplicationID").IsOptional().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserID").IsOptional().HasColumnType("int");
            Property(x => x.EventId).HasColumnName(@"EventID").IsRequired().HasColumnType("int");
            Property(x => x.ObjectId).HasColumnName(@"ObjectID").IsOptional().HasColumnType("int");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(100);
            Property(x => x.OriginalValue).HasColumnName(@"OriginalValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.NewValue).HasColumnName(@"NewValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DateTimeStamp).HasColumnName(@"DateTimeStamp").IsOptional().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TUser).WithMany(b => b.TUsersAudits).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tUsersAudit_tUsers
            HasOptional(a => a.TUsersAuditObject).WithMany(b => b.TUsersAudits).HasForeignKey(c => c.ObjectId).WillCascadeOnDelete(false); // FK_tUsersAudit_tUsersAuditObjects
        }
    }

    // tUsersAuditObjects
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersAuditObjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUsersAuditObject>
    {
        public TUsersAuditObjectConfiguration()
            : this("dbo")
        {
        }

        public TUsersAuditObjectConfiguration(string schema)
        {
            ToTable("tUsersAuditObjects", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TableName).HasColumnName(@"TableName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.ColumnName).HasColumnName(@"ColumnName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tUsersErrLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUsersErrLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUsersErrLog>
    {
        public TUsersErrLogConfiguration()
            : this("dbo")
        {
        }

        public TUsersErrLogConfiguration(string schema)
        {
            ToTable("tUsersErrLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ErrTypeId).HasColumnName(@"ErrTypeID").IsRequired().HasColumnType("int");
            Property(x => x.ErrSourceId).HasColumnName(@"ErrSourceID").IsRequired().HasColumnType("int");
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Trace).HasColumnName(@"Trace").IsOptional().HasColumnType("nvarchar");
            Property(x => x.UserId).HasColumnName(@"UserID").IsOptional().HasColumnType("int");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TUser).WithMany(b => b.TUsersErrLogs).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tUsersErrLog_tUsers
        }
    }

    // tXrefUsersMaritalStatus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TXrefUsersMaritalStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TXrefUsersMaritalStatu>
    {
        public TXrefUsersMaritalStatuConfiguration()
            : this("dbo")
        {
        }

        public TXrefUsersMaritalStatuConfiguration(string schema)
        {
            ToTable("tXrefUsersMaritalStatus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserID").IsRequired().HasColumnType("int");
            Property(x => x.MaritalStatusId).HasColumnName(@"MaritalStatusID").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.TMaritalStatus).WithMany(b => b.TXrefUsersMaritalStatus).HasForeignKey(c => c.MaritalStatusId).WillCascadeOnDelete(false); // FK_tXrefUsersMaritalStatus_tMaritalStatuses
            HasRequired(a => a.TUser).WithMany(b => b.TXrefUsersMaritalStatus).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tXrefUsersMaritalStatus_tUsers
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpAccountStatusLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String AccountStatus { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpAccountStatusSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String AccountStatus { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpCountryLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String CountryName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpCountrySelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String CountryName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpEthnicityLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Ethnicity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpEthnicitySelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Ethnicity { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpEthnicityUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpGenderLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Gender { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpGenderSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Gender { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpGenderUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpLanguageLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Language { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpLanguageSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Language { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpLanguageUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpRaceLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Race { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpRaceSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Race { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpRaceUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpSaltsLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Salt { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpSaltsSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Salt { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpSaltsUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpSexLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Sex { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpSexSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String Sex { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpStatesLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String StateName { get; set; }
        public System.Int32 CountryID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpStatesSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String StateName { get; set; }
        public System.Int32 CountryID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpTimeZoneLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String TimeZone { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpTimeZoneSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.String TimeZone { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpUsersAuditLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.Int32? ApplicationID { get; set; }
        public System.Int32? UserID { get; set; }
        public System.Int32 EventID { get; set; }
        public System.Int32? ObjectID { get; set; }
        public System.String Description { get; set; }
        public System.String OriginalValue { get; set; }
        public System.String NewValue { get; set; }
        public System.DateTime? DateTimeStamp { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpUsersAuditSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.Int32? ApplicationID { get; set; }
        public System.Int32? UserID { get; set; }
        public System.Int32 EventID { get; set; }
        public System.Int32? ObjectID { get; set; }
        public System.String Description { get; set; }
        public System.String OriginalValue { get; set; }
        public System.String NewValue { get; set; }
        public System.DateTime? DateTimeStamp { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpUsersErrLogLstReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.Int32 ErrTypeID { get; set; }
        public System.Int32 ErrSourceID { get; set; }
        public System.String Code { get; set; }
        public System.String Description { get; set; }
        public System.String Trace { get; set; }
        public System.DateTime CreateDateTime { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpUsersErrLogSelReturnModel
    {
        public System.Int32 Id { get; set; }
        public System.Int32 ErrTypeID { get; set; }
        public System.Int32 ErrSourceID { get; set; }
        public System.String Code { get; set; }
        public System.String Description { get; set; }
        public System.String Trace { get; set; }
        public System.DateTime CreateDateTime { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpUsersErrLogUpsReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SpWriteSqlErrToUsersErrLogReturnModel
    {
        public System.Decimal? InsertedID { get; set; }
    }

    #endregion

}
// </auto-generated>

