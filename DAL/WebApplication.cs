

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "C:\Users\josht_000\Dropbox\Work\SHAREForCures\Development\1. MVP Development\Internal Development\DALUsers\App.config"
//     Connection String Name: "SFCWebAppConn"
//     Connection String:      "Data Source=sfcusers.cswvgqf4hyhq.us-east-1.rds.amazonaws.com;Initial Catalog=WebApplication;User id=SFCUsersMaster;password=**zapped**;;Application Name=DAL"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Web Edition (64-bit)
// Database Engine Edition: Standard

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace DAL.WebApplication
{
    using System.Linq;

    #region Unit of work

    public interface ISFCWebAppContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        System.Data.Entity.DbSet<TAdsLog> TAdsLogs { get; set; } // tAdsLog
        System.Data.Entity.DbSet<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored
        System.Data.Entity.DbSet<TAdType> TAdTypes { get; set; } // tAdType
        System.Data.Entity.DbSet<TIcon> TIcons { get; set; } // tIcons
        System.Data.Entity.DbSet<TInvitationCode> TInvitationCodes { get; set; } // tInvitationCodes
        System.Data.Entity.DbSet<TSponsor> TSponsors { get; set; } // tSponsors
        System.Data.Entity.DbSet<TSurvey> TSurveys { get; set; } // tSurveys
        System.Data.Entity.DbSet<TSurveyQuestion> TSurveyQuestions { get; set; } // tSurveyQuestions
        System.Data.Entity.DbSet<TSurveyQuestionType> TSurveyQuestionTypes { get; set; } // tSurveyQuestionTypes
        System.Data.Entity.DbSet<TUserFilter> TUserFilters { get; set; } // tUserFilters
        System.Data.Entity.DbSet<TUserId> TUserIds { get; set; } // tUserIDs
        System.Data.Entity.DbSet<TWaAudit> TWaAudits { get; set; } // tWAAudit
        System.Data.Entity.DbSet<TWaAuditObject> TWaAuditObjects { get; set; } // tWAAuditObjects
        System.Data.Entity.DbSet<TWaErrLog> TWaErrLogs { get; set; } // tWAErrLog

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SFCWebAppContext : System.Data.Entity.DbContext, ISFCWebAppContext
    {
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public System.Data.Entity.DbSet<TAdsLog> TAdsLogs { get; set; } // tAdsLog
        public System.Data.Entity.DbSet<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored
        public System.Data.Entity.DbSet<TAdType> TAdTypes { get; set; } // tAdType
        public System.Data.Entity.DbSet<TIcon> TIcons { get; set; } // tIcons
        public System.Data.Entity.DbSet<TInvitationCode> TInvitationCodes { get; set; } // tInvitationCodes
        public System.Data.Entity.DbSet<TSponsor> TSponsors { get; set; } // tSponsors
        public System.Data.Entity.DbSet<TSurvey> TSurveys { get; set; } // tSurveys
        public System.Data.Entity.DbSet<TSurveyQuestion> TSurveyQuestions { get; set; } // tSurveyQuestions
        public System.Data.Entity.DbSet<TSurveyQuestionType> TSurveyQuestionTypes { get; set; } // tSurveyQuestionTypes
        public System.Data.Entity.DbSet<TUserFilter> TUserFilters { get; set; } // tUserFilters
        public System.Data.Entity.DbSet<TUserId> TUserIds { get; set; } // tUserIDs
        public System.Data.Entity.DbSet<TWaAudit> TWaAudits { get; set; } // tWAAudit
        public System.Data.Entity.DbSet<TWaAuditObject> TWaAuditObjects { get; set; } // tWAAuditObjects
        public System.Data.Entity.DbSet<TWaErrLog> TWaErrLogs { get; set; } // tWAErrLog

        static SFCWebAppContext()
        {
            System.Data.Entity.Database.SetInitializer<SFCWebAppContext>(null);
        }

        public SFCWebAppContext()
            : base("Name=SFCWebAppConn")
        {
        }

        public SFCWebAppContext(string connectionString)
            : base(connectionString)
        {
        }

        public SFCWebAppContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public SFCWebAppContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public SFCWebAppContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new TAdsLogConfiguration());
            modelBuilder.Configurations.Add(new TAdsSponsoredConfiguration());
            modelBuilder.Configurations.Add(new TAdTypeConfiguration());
            modelBuilder.Configurations.Add(new TIconConfiguration());
            modelBuilder.Configurations.Add(new TInvitationCodeConfiguration());
            modelBuilder.Configurations.Add(new TSponsorConfiguration());
            modelBuilder.Configurations.Add(new TSurveyConfiguration());
            modelBuilder.Configurations.Add(new TSurveyQuestionConfiguration());
            modelBuilder.Configurations.Add(new TSurveyQuestionTypeConfiguration());
            modelBuilder.Configurations.Add(new TUserFilterConfiguration());
            modelBuilder.Configurations.Add(new TUserIdConfiguration());
            modelBuilder.Configurations.Add(new TWaAuditConfiguration());
            modelBuilder.Configurations.Add(new TWaAuditObjectConfiguration());
            modelBuilder.Configurations.Add(new TWaErrLogConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new TAdsLogConfiguration(schema));
            modelBuilder.Configurations.Add(new TAdsSponsoredConfiguration(schema));
            modelBuilder.Configurations.Add(new TAdTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TIconConfiguration(schema));
            modelBuilder.Configurations.Add(new TInvitationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new TSponsorConfiguration(schema));
            modelBuilder.Configurations.Add(new TSurveyConfiguration(schema));
            modelBuilder.Configurations.Add(new TSurveyQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new TSurveyQuestionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TUserFilterConfiguration(schema));
            modelBuilder.Configurations.Add(new TUserIdConfiguration(schema));
            modelBuilder.Configurations.Add(new TWaAuditConfiguration(schema));
            modelBuilder.Configurations.Add(new TWaAuditObjectConfiguration(schema));
            modelBuilder.Configurations.Add(new TWaErrLogConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeSFCWebAppContext : ISFCWebAppContext
    {
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<TAdsLog> TAdsLogs { get; set; }
        public System.Data.Entity.DbSet<TAdsSponsored> TAdsSponsoreds { get; set; }
        public System.Data.Entity.DbSet<TAdType> TAdTypes { get; set; }
        public System.Data.Entity.DbSet<TIcon> TIcons { get; set; }
        public System.Data.Entity.DbSet<TInvitationCode> TInvitationCodes { get; set; }
        public System.Data.Entity.DbSet<TSponsor> TSponsors { get; set; }
        public System.Data.Entity.DbSet<TSurvey> TSurveys { get; set; }
        public System.Data.Entity.DbSet<TSurveyQuestion> TSurveyQuestions { get; set; }
        public System.Data.Entity.DbSet<TSurveyQuestionType> TSurveyQuestionTypes { get; set; }
        public System.Data.Entity.DbSet<TUserFilter> TUserFilters { get; set; }
        public System.Data.Entity.DbSet<TUserId> TUserIds { get; set; }
        public System.Data.Entity.DbSet<TWaAudit> TWaAudits { get; set; }
        public System.Data.Entity.DbSet<TWaAuditObject> TWaAuditObjects { get; set; }
        public System.Data.Entity.DbSet<TWaErrLog> TWaErrLogs { get; set; }

        public FakeSFCWebAppContext()
        {
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            TAdsLogs = new FakeDbSet<TAdsLog>("Id");
            TAdsSponsoreds = new FakeDbSet<TAdsSponsored>("Id");
            TAdTypes = new FakeDbSet<TAdType>("Id");
            TIcons = new FakeDbSet<TIcon>("Id");
            TInvitationCodes = new FakeDbSet<TInvitationCode>("Id");
            TSponsors = new FakeDbSet<TSponsor>("Id");
            TSurveys = new FakeDbSet<TSurvey>("Id");
            TSurveyQuestions = new FakeDbSet<TSurveyQuestion>("Id");
            TSurveyQuestionTypes = new FakeDbSet<TSurveyQuestionType>("Id");
            TUserFilters = new FakeDbSet<TUserFilter>("Id");
            TUserIds = new FakeDbSet<TUserId>("UserId");
            TWaAudits = new FakeDbSet<TWaAudit>("Id");
            TWaAuditObjects = new FakeDbSet<TWaAuditObject>("Id");
            TWaErrLogs = new FakeDbSet<TWaErrLog>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // tAdsLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdsLog
    {
        public int Id { get; set; } // ID (Primary key)
        public int SponsoredAdId { get; set; } // SponsoredAdID
        public int UserId { get; set; } // UserID
        public byte ViewClick { get; set; } // ViewClick
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Foreign keys
        public virtual TAdsSponsored TAdsSponsored { get; set; } // FK_tAdsLog_tAdsSponsored
        public virtual TUserId TUserId { get; set; } // FK_tAdsLog_tUserIDs

        public TAdsLog()
        {
            CreateDateTime = System.DateTime.Now;
        }
    }

    // tAdsSponsored
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdsSponsored
    {
        public int Id { get; set; } // ID (Primary key)
        public int AdTypeId { get; set; } // AdTypeID
        public string Description { get; set; } // Description (length: 150)
        public string Text { get; set; } // Text
        public int? UserFilterId { get; set; } // UserFilterID
        public int? IconId { get; set; } // IconID
        public string ImagePath { get; set; } // ImagePath (length: 2000)
        public string ClickPath { get; set; } // ClickPath (length: 2000)
        public int SponsorId { get; set; } // SponsorID
        public System.DateTime StartDateTime { get; set; } // StartDateTime
        public System.DateTime EndDateTime { get; set; } // EndDateTime
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsLog> TAdsLogs { get; set; } // tAdsLog.FK_tAdsLog_tAdsSponsored

        // Foreign keys
        public virtual TAdType TAdType { get; set; } // FK_tAdsSponsored_tAdType
        public virtual TIcon TIcon { get; set; } // FK_tAdsSponsored_tIcons
        public virtual TSponsor TSponsor { get; set; } // FK_tAdsSponsored_tSponsors
        public virtual TUserFilter TUserFilter { get; set; } // FK_tAdsSponsored_tUserFilters

        public TAdsSponsored()
        {
            CreateDateTime = System.DateTime.Now;
            TAdsLogs = new System.Collections.Generic.List<TAdsLog>();
        }
    }

    // tAdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdType
    {
        public int Id { get; set; } // ID (Primary key)
        public string TypeName { get; set; } // TypeName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored.FK_tAdsSponsored_tAdType

        public TAdType()
        {
            TAdsSponsoreds = new System.Collections.Generic.List<TAdsSponsored>();
        }
    }

    // tIcons
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TIcon
    {
        public int Id { get; set; } // ID (Primary key)
        public string Path { get; set; } // Path (length: 2000)
        public string AltName { get; set; } // AltName (length: 150)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored.FK_tAdsSponsored_tIcons

        public TIcon()
        {
            TAdsSponsoreds = new System.Collections.Generic.List<TAdsSponsored>();
        }
    }

    // tInvitationCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TInvitationCode
    {
        public int Id { get; set; } // ID (Primary key)
        public System.Guid InvitationCode { get; set; } // InvitationCode
        public string AssignedFirstName { get; set; } // AssignedFirstName (length: 100)
        public string AssignedLastName { get; set; } // AssignedLastName (length: 100)
        public string AssignedCompany { get; set; } // AssignedCompany (length: 100)
        public string AssignedEmailAddress { get; set; } // AssignedEmailAddress (length: 200)
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime
        public System.DateTime? UsedDateTime { get; set; } // UsedDateTime

        public TInvitationCode()
        {
            InvitationCode = System.Guid.NewGuid();
            CreateDateTime = System.DateTime.Now;
        }
    }

    // tSponsors
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSponsor
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 200)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored.FK_tAdsSponsored_tSponsors
        public virtual System.Collections.Generic.ICollection<TSurvey> TSurveys { get; set; } // tSurveys.FK_tSurveys_tSponsors

        public TSponsor()
        {
            TAdsSponsoreds = new System.Collections.Generic.List<TAdsSponsored>();
            TSurveys = new System.Collections.Generic.List<TSurvey>();
        }
    }

    // tSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurvey
    {
        public int Id { get; set; } // ID (Primary key)
        public int? SponsorId { get; set; } // SponsorID
        public int UserFilterId { get; set; } // UserFilterID
        public string InternalName { get; set; } // InternalName (length: 50)
        public string PublicName { get; set; } // PublicName (length: 150)
        public string PublicDescription { get; set; } // PublicDescription
        public string AvgLengthofTime { get; set; } // AvgLengthofTime (length: 30)
        public string MoreInfoLink { get; set; } // MoreInfoLink (length: 2000)
        public System.DateTime? StartDateTime { get; set; } // StartDateTime
        public System.DateTime? EndDateTime { get; set; } // EndDateTime
        public System.DateTime? CreateDateTime { get; set; } // CreateDateTime

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TSurveyQuestion> TSurveyQuestions { get; set; } // tSurveyQuestions.FK_tSurveyQuestions_tSurveys

        // Foreign keys
        public virtual TSponsor TSponsor { get; set; } // FK_tSurveys_tSponsors
        public virtual TUserFilter TUserFilter { get; set; } // FK_tSurveys_tUserFilters

        public TSurvey()
        {
            CreateDateTime = System.DateTime.Now;
            TSurveyQuestions = new System.Collections.Generic.List<TSurveyQuestion>();
        }
    }

    // tSurveyQuestions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurveyQuestion
    {
        public int Id { get; set; } // ID (Primary key)
        public int SurveyId { get; set; } // SurveyID
        public string Question { get; set; } // Question (length: 500)
        public int QuestionTypeId { get; set; } // QuestionTypeID
        public byte IsValid { get; set; } // IsValid
        public byte CanSkip { get; set; } // CanSkip

        // Foreign keys
        public virtual TSurvey TSurvey { get; set; } // FK_tSurveyQuestions_tSurveys
        public virtual TSurveyQuestionType TSurveyQuestionType { get; set; } // FK_tSurveyQuestions_tSurveyQuestionTypes
    }

    // tSurveyQuestionTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurveyQuestionType
    {
        public int Id { get; set; } // ID (Primary key)
        public string TypeName { get; set; } // TypeName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TSurveyQuestion> TSurveyQuestions { get; set; } // tSurveyQuestions.FK_tSurveyQuestions_tSurveyQuestionTypes

        public TSurveyQuestionType()
        {
            TSurveyQuestions = new System.Collections.Generic.List<TSurveyQuestion>();
        }
    }

    // tUserFilters
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUserFilter
    {
        public int Id { get; set; } // ID (Primary key)
        public string Description { get; set; } // Description (length: 150)
        public string FilterQuery { get; set; } // FilterQuery
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsSponsored> TAdsSponsoreds { get; set; } // tAdsSponsored.FK_tAdsSponsored_tUserFilters
        public virtual System.Collections.Generic.ICollection<TSurvey> TSurveys { get; set; } // tSurveys.FK_tSurveys_tUserFilters

        public TUserFilter()
        {
            CreateDateTime = System.DateTime.Now;
            TAdsSponsoreds = new System.Collections.Generic.List<TAdsSponsored>();
            TSurveys = new System.Collections.Generic.List<TSurvey>();
        }
    }

    // tUserIDs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUserId
    {
        public int UserId { get; set; } // UserID (Primary key)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TAdsLog> TAdsLogs { get; set; } // tAdsLog.FK_tAdsLog_tUserIDs
        public virtual System.Collections.Generic.ICollection<TWaAudit> TWaAudits { get; set; } // tWAAudit.FK_tWAAudit_tUserIDs
        public virtual System.Collections.Generic.ICollection<TWaErrLog> TWaErrLogs { get; set; } // tWAErrLog.FK_tWAErrLog_tUserIDs

        public TUserId()
        {
            TAdsLogs = new System.Collections.Generic.List<TAdsLog>();
            TWaAudits = new System.Collections.Generic.List<TWaAudit>();
            TWaErrLogs = new System.Collections.Generic.List<TWaErrLog>();
        }
    }

    // tWAAudit
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaAudit
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ApplicationId { get; set; } // ApplicationID
        public int? UserId { get; set; } // UserID
        public int EventId { get; set; } // EventID
        public int? ObjectId { get; set; } // ObjectID
        public string Description { get; set; } // Description (length: 100)
        public string OriginalValue { get; set; } // OriginalValue
        public string NewValue { get; set; } // NewValue
        public System.DateTime? DateTimeStamp { get; set; } // DateTimeStamp

        // Foreign keys
        public virtual TUserId TUserId { get; set; } // FK_tWAAudit_tUserIDs
        public virtual TWaAuditObject TWaAuditObject { get; set; } // FK_tWAAudit_tWAAuditObjects

        public TWaAudit()
        {
            DateTimeStamp = System.DateTime.Now;
        }
    }

    // tWAAuditObjects
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaAuditObject
    {
        public int Id { get; set; } // ID (Primary key)
        public string TableName { get; set; } // TableName (length: 50)
        public string ColumnName { get; set; } // ColumnName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<TWaAudit> TWaAudits { get; set; } // tWAAudit.FK_tWAAudit_tWAAuditObjects

        public TWaAuditObject()
        {
            TWaAudits = new System.Collections.Generic.List<TWaAudit>();
        }
    }

    // tWAErrLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaErrLog
    {
        public int Id { get; set; } // Id (Primary key)
        public int ErrTypeId { get; set; } // ErrTypeID
        public int ErrSourceId { get; set; } // ErrSourceID
        public string Code { get; set; } // Code (length: 50)
        public string Description { get; set; } // Description
        public string Trace { get; set; } // Trace
        public int? UserId { get; set; } // UserID
        public System.DateTime CreateDateTime { get; set; } // CreateDateTime

        // Foreign keys
        public virtual TUserId TUserId { get; set; } // FK_tWAErrLog_tUserIDs

        public TWaErrLog()
        {
            CreateDateTime = System.DateTime.Now;
        }
    }

    #endregion

    #region POCO Configuration

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // tAdsLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdsLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TAdsLog>
    {
        public TAdsLogConfiguration()
            : this("dbo")
        {
        }

        public TAdsLogConfiguration(string schema)
        {
            ToTable("tAdsLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SponsoredAdId).HasColumnName(@"SponsoredAdID").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserID").IsRequired().HasColumnType("int");
            Property(x => x.ViewClick).HasColumnName(@"ViewClick").IsRequired().HasColumnType("tinyint");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");

            // Foreign keys
            HasRequired(a => a.TAdsSponsored).WithMany(b => b.TAdsLogs).HasForeignKey(c => c.SponsoredAdId).WillCascadeOnDelete(false); // FK_tAdsLog_tAdsSponsored
            HasRequired(a => a.TUserId).WithMany(b => b.TAdsLogs).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tAdsLog_tUserIDs
        }
    }

    // tAdsSponsored
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdsSponsoredConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TAdsSponsored>
    {
        public TAdsSponsoredConfiguration()
            : this("dbo")
        {
        }

        public TAdsSponsoredConfiguration(string schema)
        {
            ToTable("tAdsSponsored", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AdTypeId).HasColumnName(@"AdTypeID").IsRequired().HasColumnType("int");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.Text).HasColumnName(@"Text").IsRequired().HasColumnType("nvarchar");
            Property(x => x.UserFilterId).HasColumnName(@"UserFilterID").IsOptional().HasColumnType("int");
            Property(x => x.IconId).HasColumnName(@"IconID").IsOptional().HasColumnType("int");
            Property(x => x.ImagePath).HasColumnName(@"ImagePath").IsRequired().HasColumnType("nvarchar").HasMaxLength(2000);
            Property(x => x.ClickPath).HasColumnName(@"ClickPath").IsOptional().HasColumnType("nvarchar").HasMaxLength(2000);
            Property(x => x.SponsorId).HasColumnName(@"SponsorID").IsRequired().HasColumnType("int");
            Property(x => x.StartDateTime).HasColumnName(@"StartDateTime").IsRequired().HasColumnType("datetime2");
            Property(x => x.EndDateTime).HasColumnName(@"EndDateTime").IsRequired().HasColumnType("datetime2");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TIcon).WithMany(b => b.TAdsSponsoreds).HasForeignKey(c => c.IconId).WillCascadeOnDelete(false); // FK_tAdsSponsored_tIcons
            HasOptional(a => a.TUserFilter).WithMany(b => b.TAdsSponsoreds).HasForeignKey(c => c.UserFilterId).WillCascadeOnDelete(false); // FK_tAdsSponsored_tUserFilters
            HasRequired(a => a.TAdType).WithMany(b => b.TAdsSponsoreds).HasForeignKey(c => c.AdTypeId).WillCascadeOnDelete(false); // FK_tAdsSponsored_tAdType
            HasRequired(a => a.TSponsor).WithMany(b => b.TAdsSponsoreds).HasForeignKey(c => c.SponsorId).WillCascadeOnDelete(false); // FK_tAdsSponsored_tSponsors
        }
    }

    // tAdType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TAdTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TAdType>
    {
        public TAdTypeConfiguration()
            : this("dbo")
        {
        }

        public TAdTypeConfiguration(string schema)
        {
            ToTable("tAdType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TypeName).HasColumnName(@"TypeName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // tIcons
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TIconConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TIcon>
    {
        public TIconConfiguration()
            : this("dbo")
        {
        }

        public TIconConfiguration(string schema)
        {
            ToTable("tIcons", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Path).HasColumnName(@"Path").IsRequired().HasColumnType("nvarchar").HasMaxLength(2000);
            Property(x => x.AltName).HasColumnName(@"AltName").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
        }
    }

    // tInvitationCodes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TInvitationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TInvitationCode>
    {
        public TInvitationCodeConfiguration()
            : this("dbo")
        {
        }

        public TInvitationCodeConfiguration(string schema)
        {
            ToTable("tInvitationCodes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InvitationCode).HasColumnName(@"InvitationCode").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.AssignedFirstName).HasColumnName(@"AssignedFirstName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.AssignedLastName).HasColumnName(@"AssignedLastName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.AssignedCompany).HasColumnName(@"AssignedCompany").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.AssignedEmailAddress).HasColumnName(@"AssignedEmailAddress").IsRequired().HasColumnType("nvarchar").HasMaxLength(200);
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");
            Property(x => x.UsedDateTime).HasColumnName(@"UsedDateTime").IsOptional().HasColumnType("datetime2");
        }
    }

    // tSponsors
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSponsorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSponsor>
    {
        public TSponsorConfiguration()
            : this("dbo")
        {
        }

        public TSponsorConfiguration(string schema)
        {
            ToTable("tSponsors", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(200);
        }
    }

    // tSurveys
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurveyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSurvey>
    {
        public TSurveyConfiguration()
            : this("dbo")
        {
        }

        public TSurveyConfiguration(string schema)
        {
            ToTable("tSurveys", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SponsorId).HasColumnName(@"SponsorID").IsOptional().HasColumnType("int");
            Property(x => x.UserFilterId).HasColumnName(@"UserFilterID").IsRequired().HasColumnType("int");
            Property(x => x.InternalName).HasColumnName(@"InternalName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PublicName).HasColumnName(@"PublicName").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.PublicDescription).HasColumnName(@"PublicDescription").IsOptional().HasColumnType("nvarchar");
            Property(x => x.AvgLengthofTime).HasColumnName(@"AvgLengthofTime").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.MoreInfoLink).HasColumnName(@"MoreInfoLink").IsOptional().HasColumnType("nvarchar").HasMaxLength(2000);
            Property(x => x.StartDateTime).HasColumnName(@"StartDateTime").IsOptional().HasColumnType("datetime2");
            Property(x => x.EndDateTime).HasColumnName(@"EndDateTime").IsOptional().HasColumnType("datetime2");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsOptional().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TSponsor).WithMany(b => b.TSurveys).HasForeignKey(c => c.SponsorId).WillCascadeOnDelete(false); // FK_tSurveys_tSponsors
            HasRequired(a => a.TUserFilter).WithMany(b => b.TSurveys).HasForeignKey(c => c.UserFilterId).WillCascadeOnDelete(false); // FK_tSurveys_tUserFilters
        }
    }

    // tSurveyQuestions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurveyQuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSurveyQuestion>
    {
        public TSurveyQuestionConfiguration()
            : this("dbo")
        {
        }

        public TSurveyQuestionConfiguration(string schema)
        {
            ToTable("tSurveyQuestions", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SurveyId).HasColumnName(@"SurveyID").IsRequired().HasColumnType("int");
            Property(x => x.Question).HasColumnName(@"Question").IsRequired().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.QuestionTypeId).HasColumnName(@"QuestionTypeID").IsRequired().HasColumnType("int");
            Property(x => x.IsValid).HasColumnName(@"IsValid").IsRequired().HasColumnType("tinyint");
            Property(x => x.CanSkip).HasColumnName(@"CanSkip").IsRequired().HasColumnType("tinyint");

            // Foreign keys
            HasRequired(a => a.TSurvey).WithMany(b => b.TSurveyQuestions).HasForeignKey(c => c.SurveyId).WillCascadeOnDelete(false); // FK_tSurveyQuestions_tSurveys
            HasRequired(a => a.TSurveyQuestionType).WithMany(b => b.TSurveyQuestions).HasForeignKey(c => c.QuestionTypeId).WillCascadeOnDelete(false); // FK_tSurveyQuestions_tSurveyQuestionTypes
        }
    }

    // tSurveyQuestionTypes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TSurveyQuestionTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TSurveyQuestionType>
    {
        public TSurveyQuestionTypeConfiguration()
            : this("dbo")
        {
        }

        public TSurveyQuestionTypeConfiguration(string schema)
        {
            ToTable("tSurveyQuestionTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TypeName).HasColumnName(@"TypeName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // tUserFilters
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUserFilterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUserFilter>
    {
        public TUserFilterConfiguration()
            : this("dbo")
        {
        }

        public TUserFilterConfiguration(string schema)
        {
            ToTable("tUserFilters", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.FilterQuery).HasColumnName(@"FilterQuery").IsOptional().HasColumnType("nvarchar");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");
        }
    }

    // tUserIDs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TUserIdConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TUserId>
    {
        public TUserIdConfiguration()
            : this("dbo")
        {
        }

        public TUserIdConfiguration(string schema)
        {
            ToTable("tUserIDs", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // tWAAudit
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaAuditConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TWaAudit>
    {
        public TWaAuditConfiguration()
            : this("dbo")
        {
        }

        public TWaAuditConfiguration(string schema)
        {
            ToTable("tWAAudit", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ApplicationId).HasColumnName(@"ApplicationID").IsOptional().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserID").IsOptional().HasColumnType("int");
            Property(x => x.EventId).HasColumnName(@"EventID").IsRequired().HasColumnType("int");
            Property(x => x.ObjectId).HasColumnName(@"ObjectID").IsOptional().HasColumnType("int");
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(100);
            Property(x => x.OriginalValue).HasColumnName(@"OriginalValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.NewValue).HasColumnName(@"NewValue").IsOptional().HasColumnType("nvarchar");
            Property(x => x.DateTimeStamp).HasColumnName(@"DateTimeStamp").IsOptional().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TUserId).WithMany(b => b.TWaAudits).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tWAAudit_tUserIDs
            HasOptional(a => a.TWaAuditObject).WithMany(b => b.TWaAudits).HasForeignKey(c => c.ObjectId).WillCascadeOnDelete(false); // FK_tWAAudit_tWAAuditObjects
        }
    }

    // tWAAuditObjects
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaAuditObjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TWaAuditObject>
    {
        public TWaAuditObjectConfiguration()
            : this("dbo")
        {
        }

        public TWaAuditObjectConfiguration(string schema)
        {
            ToTable("tWAAuditObjects", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TableName).HasColumnName(@"TableName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            Property(x => x.ColumnName).HasColumnName(@"ColumnName").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // tWAErrLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.22.1.0")]
    public class TWaErrLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TWaErrLog>
    {
        public TWaErrLogConfiguration()
            : this("dbo")
        {
        }

        public TWaErrLogConfiguration(string schema)
        {
            ToTable("tWAErrLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ErrTypeId).HasColumnName(@"ErrTypeID").IsRequired().HasColumnType("int");
            Property(x => x.ErrSourceId).HasColumnName(@"ErrSourceID").IsRequired().HasColumnType("int");
            Property(x => x.Code).HasColumnName(@"Code").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Trace).HasColumnName(@"Trace").IsOptional().HasColumnType("nvarchar");
            Property(x => x.UserId).HasColumnName(@"UserID").IsOptional().HasColumnType("int");
            Property(x => x.CreateDateTime).HasColumnName(@"CreateDateTime").IsRequired().HasColumnType("datetime2");

            // Foreign keys
            HasOptional(a => a.TUserId).WithMany(b => b.TWaErrLogs).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_tWAErrLog_tUserIDs
        }
    }

    #endregion

}
// </auto-generated>

